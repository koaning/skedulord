{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Skedulord is a tool that automates scheduling and logging of jobs. It's a layer on top of cron. It's mainly meant for python users but it can also be used for other tools launched from the command line. If you're new, check out the getting started guide . Commands \u00b6 Usage: __main__.py [OPTIONS] COMMAND [ARGS]... SKEDULORD: helps with cronjobs and logs. Options: --help Show this message and exit. Commands: build Builds static html files so you may view a dashboard. history Shows a table with job status. run Run a single command, which is logged by skedulord. schedule Set (or reset) cron jobs based on config. serve Opens the dashboard in a browser. version Show the version. wipe Wipe the disk or schedule state.","title":"Index"},{"location":"index.html#commands","text":"Usage: __main__.py [OPTIONS] COMMAND [ARGS]... SKEDULORD: helps with cronjobs and logs. Options: --help Show this message and exit. Commands: build Builds static html files so you may view a dashboard. history Shows a table with job status. run Run a single command, which is logged by skedulord. schedule Set (or reset) cron jobs based on config. serve Opens the dashboard in a browser. version Show the version. wipe Wipe the disk or schedule state.","title":"Commands"},{"location":"cli.html","text":"run \u00b6 Run a single command, which is logged by skedulord. Arguments: NAME The name you want to assign to the run. [required] COMMAND The command you want to run (in parentheses). [required] Options: --retry INTEGER The number of re-tries, should a job fail. [default: 1] --wait INTEGER The number of seconds between tries. [default: 60] --help Show this message and exit. schedule \u00b6 Set (or reset) cron jobs based on config. Arguments: CONFIG The config file containing the schedule. [required] Options: --help Show this message and exit. history \u00b6 Shows a table with job status. Options : --n INTEGER How many rows should the table show. [ default : 10 ] --only-failures / --no-only-failures Only show failures . [ default : False ] --date TEXT Only show specific date. --jobname TEXT Only show jobs with specific name. --help Show this message and exit. build \u00b6 Builds static html files so you may view a dashboard. Options: --help Show this message and exit. serve \u00b6 Opens the dashboard in a browser. Options: --build / --no-build Build the dashboard before opening it. [default: True] wipe \u00b6 Wipe the disk or schedule state. Arguments: WHAT What to wipe. Either `disk` or `schedule`. [required] Options: --yes / --no-yes Are you sure? [default: False] --really / --no-really Really sure? [default: False] --user TEXT The name of the user. Default: curent user. --help Show this message and exit. version \u00b6 Show the version. Options: --help Show this message and exit.","title":"CLI API"},{"location":"cli.html#run","text":"Run a single command, which is logged by skedulord. Arguments: NAME The name you want to assign to the run. [required] COMMAND The command you want to run (in parentheses). [required] Options: --retry INTEGER The number of re-tries, should a job fail. [default: 1] --wait INTEGER The number of seconds between tries. [default: 60] --help Show this message and exit.","title":"run"},{"location":"cli.html#schedule","text":"Set (or reset) cron jobs based on config. Arguments: CONFIG The config file containing the schedule. [required] Options: --help Show this message and exit.","title":"schedule"},{"location":"cli.html#history","text":"Shows a table with job status. Options : --n INTEGER How many rows should the table show. [ default : 10 ] --only-failures / --no-only-failures Only show failures . [ default : False ] --date TEXT Only show specific date. --jobname TEXT Only show jobs with specific name. --help Show this message and exit.","title":"history"},{"location":"cli.html#build","text":"Builds static html files so you may view a dashboard. Options: --help Show this message and exit.","title":"build"},{"location":"cli.html#serve","text":"Opens the dashboard in a browser. Options: --build / --no-build Build the dashboard before opening it. [default: True]","title":"serve"},{"location":"cli.html#wipe","text":"Wipe the disk or schedule state. Arguments: WHAT What to wipe. Either `disk` or `schedule`. [required] Options: --yes / --no-yes Are you sure? [default: False] --really / --no-really Really sure? [default: False] --user TEXT The name of the user. Default: curent user. --help Show this message and exit.","title":"wipe"},{"location":"cli.html#version","text":"Show the version. Options: --help Show this message and exit.","title":"version"},{"location":"config.html","text":"","title":"Config"},{"location":"getting-started.html","text":"Let's say we've got this small python file. # script.py for i in range ( 5 ): print ( f \"i am at iteration { i } \" ) The idea here is that skedulord can run this and keep track of logs. python -m skedulord run jobname1 \"python script.py\" --retry 3 --wait 60 python -m skedulord run jobname2 \"python script.py\" --retry 3 --wait 60 This will run the \"python script.py\" command as if you'd normally run it from the command line. The skedulord parts around it do some extra things though. Logs \u00b6 The main thing skedulord does is structure logs from your scripts. The logs are generated in a structured format so it's easy to find bugs. When we ran the skedulord run command we attached a jobname (aptly named \"jobname\" ) which will also be the name of the folder where logs can be found. > tree ~/.skedulord/ /Users/vincent/.skedulord/ \u251c\u2500\u2500 heartbeat.jsonl \u251c\u2500\u2500 jobname1 \u2502 \u251c\u2500\u2500 2021-02-14T16:56:34.html \u2502 \u2514\u2500\u2500 2021-02-14T16:56:34.txt \u2514\u2500\u2500 jobname2 \u251c\u2500\u2500 2021-02-14T16:56:35.html \u2514\u2500\u2500 2021-02-14T16:56:35.txt The logs themselves have a timestamp as the filename. There are basic .txt logs but also fancy .html logs which render nicely in a dashboard. Mechanics \u00b6 We've designed skedulord to also be able to rerun jobs if they fail. Hiccups are part of real life and sometimes we can make a job succeed by trying again 5 minutes later. This is why you can specify how many attempts you'd like the job to make by setting --retry . You can also specify the wait time between attempts via --wait . Schedule \u00b6 The nice thing about skedulord running from the command line is that you can schedule it via crontab too! The downside is that it can get complex. You'd need to ensure that the jobs have access to the correct virtual environments and this can become a drag. To help out, skedulord can also configure cron for you by configuring a .yml file. # schedule.yml user : vincent schedule : - name : ping command : python /home/vincent/path/scripts/ping.py cron : \"*/2 * * * *\" - name : github issues downloader command : python /full/path/to/cli.py --repo foobar --output /Users/vincent/data cron : \"0 1 * * *\" - name : github actions downloader command : python /full/path/to/scrape.py --repo foobar --output /Users/vincent/data cron : \"0 1 * * *\" Note that it's important to give full paths to files here. Given a schedule like this, skedulord can schedule everything via; python -m skedulord schedule schedule.yml You can confirm yourself that all jobs are now scheduled to run, with skedulord taking care of all the logging. crontab -e Note that Unless configured otherwise, skedulord will assume the same virtualenv as the one that ran the skedulord schedule command. This is important to be aware of if your scripts carry dependencies. Inspection \u00b6 Hopefully, your jobs won't fail. But if they do, you'd want to find the logs for the broken jobs as soon as possible. python - m skedulord history This history command has many query parameters that makes it easy for you to find the logs of the jobs that failed. Dashboard \u00b6 If you want, you can even use skedulord to run a small dashboard for you. It's nice and minimal as to not to distract you. python - m skedulord serve Shutting Down \u00b6 If you're done with the app you can wipe the cronjobs and disk state from the command line as well. # Wipe all the logs from disk. python - m skedulord wipe disk -- yes -- really # Wipe all the cron entries. python - m skedulord wipe cron -- yes -- really","title":"Getting Started"},{"location":"getting-started.html#logs","text":"The main thing skedulord does is structure logs from your scripts. The logs are generated in a structured format so it's easy to find bugs. When we ran the skedulord run command we attached a jobname (aptly named \"jobname\" ) which will also be the name of the folder where logs can be found. > tree ~/.skedulord/ /Users/vincent/.skedulord/ \u251c\u2500\u2500 heartbeat.jsonl \u251c\u2500\u2500 jobname1 \u2502 \u251c\u2500\u2500 2021-02-14T16:56:34.html \u2502 \u2514\u2500\u2500 2021-02-14T16:56:34.txt \u2514\u2500\u2500 jobname2 \u251c\u2500\u2500 2021-02-14T16:56:35.html \u2514\u2500\u2500 2021-02-14T16:56:35.txt The logs themselves have a timestamp as the filename. There are basic .txt logs but also fancy .html logs which render nicely in a dashboard.","title":"Logs"},{"location":"getting-started.html#mechanics","text":"We've designed skedulord to also be able to rerun jobs if they fail. Hiccups are part of real life and sometimes we can make a job succeed by trying again 5 minutes later. This is why you can specify how many attempts you'd like the job to make by setting --retry . You can also specify the wait time between attempts via --wait .","title":"Mechanics"},{"location":"getting-started.html#schedule","text":"The nice thing about skedulord running from the command line is that you can schedule it via crontab too! The downside is that it can get complex. You'd need to ensure that the jobs have access to the correct virtual environments and this can become a drag. To help out, skedulord can also configure cron for you by configuring a .yml file. # schedule.yml user : vincent schedule : - name : ping command : python /home/vincent/path/scripts/ping.py cron : \"*/2 * * * *\" - name : github issues downloader command : python /full/path/to/cli.py --repo foobar --output /Users/vincent/data cron : \"0 1 * * *\" - name : github actions downloader command : python /full/path/to/scrape.py --repo foobar --output /Users/vincent/data cron : \"0 1 * * *\" Note that it's important to give full paths to files here. Given a schedule like this, skedulord can schedule everything via; python -m skedulord schedule schedule.yml You can confirm yourself that all jobs are now scheduled to run, with skedulord taking care of all the logging. crontab -e Note that Unless configured otherwise, skedulord will assume the same virtualenv as the one that ran the skedulord schedule command. This is important to be aware of if your scripts carry dependencies.","title":"Schedule"},{"location":"getting-started.html#inspection","text":"Hopefully, your jobs won't fail. But if they do, you'd want to find the logs for the broken jobs as soon as possible. python - m skedulord history This history command has many query parameters that makes it easy for you to find the logs of the jobs that failed.","title":"Inspection"},{"location":"getting-started.html#dashboard","text":"If you want, you can even use skedulord to run a small dashboard for you. It's nice and minimal as to not to distract you. python - m skedulord serve","title":"Dashboard"},{"location":"getting-started.html#shutting-down","text":"If you're done with the app you can wipe the cronjobs and disk state from the command line as well. # Wipe all the logs from disk. python - m skedulord wipe disk -- yes -- really # Wipe all the cron entries. python - m skedulord wipe cron -- yes -- really","title":"Shutting Down"}]}